{
  "url": "https://api.github.com/repos/openvenues/libpostal/releases/6018108",
  "assets_url": "https://api.github.com/repos/openvenues/libpostal/releases/6018108/assets",
  "upload_url": "https://uploads.github.com/repos/openvenues/libpostal/releases/6018108/assets{?name,label}",
  "html_url": "https://github.com/openvenues/libpostal/releases/tag/v1.0.0",
  "id": 6018108,
  "node_id": "MDc6UmVsZWFzZTYwMTgxMDg=",
  "tag_name": "v1.0.0",
  "target_commitish": "master",
  "name": "Brooklyn 99",
  "draft": false,
  "author": {
    "login": "albarrentine",
    "id": 238455,
    "node_id": "MDQ6VXNlcjIzODQ1NQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/238455?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/albarrentine",
    "html_url": "https://github.com/albarrentine",
    "followers_url": "https://api.github.com/users/albarrentine/followers",
    "following_url": "https://api.github.com/users/albarrentine/following{/other_user}",
    "gists_url": "https://api.github.com/users/albarrentine/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/albarrentine/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/albarrentine/subscriptions",
    "organizations_url": "https://api.github.com/users/albarrentine/orgs",
    "repos_url": "https://api.github.com/users/albarrentine/repos",
    "events_url": "https://api.github.com/users/albarrentine/events{/privacy}",
    "received_events_url": "https://api.github.com/users/albarrentine/received_events",
    "type": "User",
    "site_admin": false
  },
  "prerelease": false,
  "created_at": "2017-04-07T21:40:27Z",
  "published_at": "2017-04-07T21:48:36Z",
  "assets": [
    {
      "url": "https://api.github.com/repos/openvenues/libpostal/releases/assets/5813130",
      "id": 5813130,
      "node_id": "MDEyOlJlbGVhc2VBc3NldDU4MTMxMzA=",
      "name": "language_classifier.tar.gz",
      "label": null,
      "uploader": {
        "login": "albarrentine",
        "id": 238455,
        "node_id": "MDQ6VXNlcjIzODQ1NQ==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/238455?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/albarrentine",
        "html_url": "https://github.com/albarrentine",
        "followers_url": "https://api.github.com/users/albarrentine/followers",
        "following_url": "https://api.github.com/users/albarrentine/following{/other_user}",
        "gists_url": "https://api.github.com/users/albarrentine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/albarrentine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/albarrentine/subscriptions",
        "organizations_url": "https://api.github.com/users/albarrentine/orgs",
        "repos_url": "https://api.github.com/users/albarrentine/repos",
        "events_url": "https://api.github.com/users/albarrentine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/albarrentine/received_events",
        "type": "User",
        "site_admin": false
      },
      "content_type": "application/x-gzip",
      "state": "uploaded",
      "size": 50334317,
      "download_count": 30817,
      "created_at": "2018-01-08T19:47:08Z",
      "updated_at": "2018-01-08T19:47:23Z",
      "browser_download_url": "https://github.com/openvenues/libpostal/releases/download/v1.0.0/language_classifier.tar.gz"
    },
    {
      "url": "https://api.github.com/repos/openvenues/libpostal/releases/assets/6471387",
      "id": 6471387,
      "node_id": "MDEyOlJlbGVhc2VBc3NldDY0NzEzODc=",
      "name": "libpostal_data.tar.gz",
      "label": null,
      "uploader": {
        "login": "albarrentine",
        "id": 238455,
        "node_id": "MDQ6VXNlcjIzODQ1NQ==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/238455?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/albarrentine",
        "html_url": "https://github.com/albarrentine",
        "followers_url": "https://api.github.com/users/albarrentine/followers",
        "following_url": "https://api.github.com/users/albarrentine/following{/other_user}",
        "gists_url": "https://api.github.com/users/albarrentine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/albarrentine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/albarrentine/subscriptions",
        "organizations_url": "https://api.github.com/users/albarrentine/orgs",
        "repos_url": "https://api.github.com/users/albarrentine/repos",
        "events_url": "https://api.github.com/users/albarrentine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/albarrentine/received_events",
        "type": "User",
        "site_admin": false
      },
      "content_type": "application/x-gzip",
      "state": "uploaded",
      "size": 10190140,
      "download_count": 30328,
      "created_at": "2018-03-11T01:03:43Z",
      "updated_at": "2018-03-11T01:03:46Z",
      "browser_download_url": "https://github.com/openvenues/libpostal/releases/download/v1.0.0/libpostal_data.tar.gz"
    },
    {
      "url": "https://api.github.com/repos/openvenues/libpostal/releases/assets/5806509",
      "id": 5806509,
      "node_id": "MDEyOlJlbGVhc2VBc3NldDU4MDY1MDk=",
      "name": "parser.tar.gz",
      "label": null,
      "uploader": {
        "login": "albarrentine",
        "id": 238455,
        "node_id": "MDQ6VXNlcjIzODQ1NQ==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/238455?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/albarrentine",
        "html_url": "https://github.com/albarrentine",
        "followers_url": "https://api.github.com/users/albarrentine/followers",
        "following_url": "https://api.github.com/users/albarrentine/following{/other_user}",
        "gists_url": "https://api.github.com/users/albarrentine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/albarrentine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/albarrentine/subscriptions",
        "organizations_url": "https://api.github.com/users/albarrentine/orgs",
        "repos_url": "https://api.github.com/users/albarrentine/repos",
        "events_url": "https://api.github.com/users/albarrentine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/albarrentine/received_events",
        "type": "User",
        "site_admin": false
      },
      "content_type": "application/x-gzip",
      "state": "uploaded",
      "size": 752483239,
      "download_count": 339813,
      "created_at": "2018-01-08T02:56:36Z",
      "updated_at": "2018-01-08T03:10:53Z",
      "browser_download_url": "https://github.com/openvenues/libpostal/releases/download/v1.0.0/parser.tar.gz"
    }
  ],
  "tarball_url": "https://api.github.com/repos/openvenues/libpostal/tarball/v1.0.0",
  "zipball_url": "https://api.github.com/repos/openvenues/libpostal/zipball/v1.0.0",
  "body": "The great parser-data merge is complete. Libpostal 1.0 features a better-than-ever international address parser which achieves 99.45% full-parse accuracy on held-out addresses. The release title is a reference to the TV show (libpostal was also created in Brooklyn and this was the first version of the model to surpass 99% accuracy). Check out the [blog post](https://medium.com/@albarrentine/statistical-nlp-on-openstreetmap-part-2-80405b988718) for the details. Here's a sample of what it can do in a GIF:\r\n\r\n![parser](https://cloud.githubusercontent.com/assets/238455/24703087/acbe35d8-19cf-11e7-8850-77fb1c3446a7.gif)\r\n\r\n## Breaking API Changes ##\r\n- Every function, struct, constant, etc. defined in the public header (libpostal.h) now uses a \"libpostal_\" prefix . This affects all bindings that call the C API. The bindings that are part of this Github org all have 1.0 branches.\r\n\r\n## New tags ##\r\n\r\n### Sub-building tags ###\r\n- **unit**: an apartment, unit, office, lot, or other secondary unit designator\r\n- **level**: expressions indicating a floor number e.g. \"3rd Floor\", \"Ground Floor\", etc.\r\n- **staircase**: numbered/lettered staircase\r\n- **entrance**: numbered/lettered entrance\r\n- **po_box**: post office box: typically found in non-physical (mail-only) addresses\r\n\r\n### Category tags ###\r\n- **category**: for category queries like \"restaurants\", etc.\r\n- **near**: phrases like \"in\", \"near\", etc. used after a category phrase to help with parsing queries like \"restaurants in Brooklyn\"\r\n\r\n### New admin tags ###\r\n- **island**: named islands e.g. \"Maui\"\r\n- **country_region**: informal subdivision of a country without any political status\r\n- **world_region**: currently only used for appending “West Indies” after the country name, a pattern frequently used in the English-speaking Caribbean e.g. “Jamaica, West Indies”\r\n\r\n## No more accent-stripping/transliteration of input ##\r\n\r\nThere's a new transliterator which only makes simple modifications to the input (HTML entity normalization, NFC unicode normalization). Latin-ASCII transliteration is no longer used at runtime. Instead, addresses are transliterated to multiple forms during training so the parser has to deal with all the variants rather than normalizing to a single variant (which previously was not even correct in cases like Finnish, Turkish, etc.) in both places.\r\n\r\n## Trained on > 1 billion examples in every inhabited country on Earth ##\r\n\r\nThe training data for libpostal's parser has been greatly expanded to include every country and dependency in OpenStreetMap. We also train on a places-only data set where every city name from OSM gets some representation even if there are no addresses (higher-population cities get examples proportional to their population). A similar training set is constructed for streets, so even places which have very few addresses but do have a road network in OSM can be included.\r\n\r\n1.0 also moves beyond OSM, training on most of the data sets in [OpenAddresses](openaddresses/openaddresses), and postal codes + associated admins from Yahoo's GeoPlanet, which includes virtually every postcode in the UK, Canada, etc.\r\n\r\n## Almost 100GB of public training data ##\r\n\r\nAll files can be found under s3://libpostal/training_data/YYYY-MM-DD/parser/ as gzip'd tab-separated values (TSV) files formatted like:```language\\tcountry\\taddress```.\r\n\r\n- **formatted_addresses_tagged.random.tsv.gz** (ODBL): OSM addresses. Apartments, PO boxes, categories, etc. are added primarily to these examples\r\n- **formatted_places_tagged.random.tsv.gz** (ODBL): every toponym in OSM (even cities represented as points, etc.), reverse-geocoded to its parent admins, possibly including postal codes if they're listed on the point/polygon. Every place gets a base level of representation and places with higher populations get proportionally more.\r\n- **formatted_ways_tagged.random.tsv.gz** (ODBL): every street in OSM (ways with highway=*, with a few conditions), reverse-geocoded to its admins\r\n- **geoplanet_formatted_addresses_tagged.random.tsv.gz** (CC-BY): every postal code in Yahoo GeoPlanet (includes almost every postcode in the UK, Canada, etc.) and their parent admins. The GeoPlanet admins have been cleaned up and mapped to libpostal's tagset\r\n- **openaddresses_formatted_addresses_tagged.random.tsv.gz** (various licenses, mostly CC-BY): most of the address data sets from [OpenAddresses](https://openaddresses.io/), which in turn come directly from government sources\r\n- **uk_openaddresses_formatted_addresses_tagged.random.tsv.gz** (CC-BY): addresses from [OpenAddresses UK](https://alpha.openaddressesuk.org/)\r\n\r\nIf the parser doesn't perform as well as you'd hoped on a particular type of address, the best recourse is to use grep/awk to look through the training data and try to determine if there's some pattern/style of address that's not being captured.\r\n\r\n## Better feature extraction ##\r\n\r\n- n-grams for the \"unknown\" words (occurred fewer than n times in the training set)\r\n- for unknown words that are hyphenated, each of the individual subwords if frequent enough, and their ngrams otherwise\r\n- an index of postcodes and their admin contexts built from the training data (the intuition is that something like \"10001\" could be a postcode or a house number, but if words like \"New York\", \"NY\", \"United States\", etc. are to its right or left, it's more likely to be a postcode).\r\n- for first words that are unknown (could be part of a venue/business name, could be a rare/misspelled street), a feature which finds the relative position of the next number and the next address phrase if present. Usually if the parser gets the first word in the string correct it will get the entire string correct.\r\n\r\n## More powerful machine learning model (CRF) ##\r\n\r\nlibpostal 1.0 uses a [Conditional Random Field](http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/) (CRF) instead of the greedy averaged perceptron. This more powerful machine learning method scores sequences rather than individual decisions, and can revise its previous decision if that would help a subsequent token score higher (Viterbi inference).\r\n\r\nImproves upon the CRFsuite implementation in terms of:\r\n1. performance: Viterbi inference sped up by 2x\r\n2. scalability: training set doesn't need to fit in memory\r\n3. model expressiveness: libpostal's CRF adds state-transition features which can make use of both the state of the current token and the previous tag. These act just like normal features except their weights are LxL matrices (tags we could have transitioned from by tags we could transition to) instead of L vectors.\r\n\r\n## FTRL-Proximal optimization for the language classifier ##\r\nThe language classifier now uses a multinomial version of Google's [FTRL-Proximal](https://research.google.com/pubs/archive/41159.pdf) method, which uses a combination of L1 and L2 regularization, inducing sparsity while maintaining high accuracy. This results in a model that is more accurate than the previous classifier while being 1/10th the size. The runtime classifier is now able to load either sparse or dense weights depending on the file header."
}
